package com.company;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.rmi.server.ExportException;
import java.util.stream.IntStream;

public class Main extends Application {

    /*   public static void main(String[] args) throws IOException {
           FileInputStream fis = new FileInputStream("C:/Users/Anastasia/Documents/Development/Materials/Moskvina.xls");
           Workbook wb = new HSSFWorkbook(fis);
           int row = 8;
           int column = 5;
           double[][] Components = new double[column][row];
               for (column = 0; column < 5; column++) {
                   for (row = 0; row < 8; row++) {
                       double result = wb.getSheetAt(0).getRow(row + 1).getCell(column + 6).getNumericCellValue();
                       Components[column][row] = result;
                       result = 0;
                   }
                   row = 0;
               } */
    static double[][][] TRAINING_DATA = {{{1.0, 120.0}, {5.3}},
            {{1.0, 291.0}, {6.3}},
            {{1.0, 361.8}, {5.9}},
            {{1.0, 181.7}, {5.7}},
            {{1.0, 832.6}, {5.9}}};
    static LinearRegression lr;
    public static void main(String[] args) throws Exception {

        double[][] xArray = new double[TRAINING_DATA.length][TRAINING_DATA[0][0].length];

        double[][] yArray = new double[TRAINING_DATA.length][1];

        IntStream.range(0, TRAINING_DATA.length).forEach(i -> {
            IntStream.range(0, TRAINING_DATA[0][0].length).forEach(j -> xArray[i][j] = TRAINING_DATA[i][0][j]);
            yArray[i][0] = TRAINING_DATA[i][1][0];
        });
        lr = new LinearRegression(xArray, yArray);
        launch();
    }
           /* System.out.println(Arrays.deepToString(Components));
            fis.close();
        System.out.println(new PearsonsCorrelation().computeCorrelationMatrix(Components)); */

    static void handleCommandLine() throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.println("> to estimate glu_after_meter, enter Kkal, or exit:");
            try {
                String entry = bufferedReader.readLine();
                if (!entry.equals("exit")) System.out.println("glu_after_meter: " + lr.estimateRent(entry));
                else System.exit(0);
            } catch (ExportException e) { System.out.println("Invalid input"); }
        }
    }
    public void start(Stage primaryStage) throws Exception {
        Platform.setImplicitExit(false);
        XYChart.Series<Number, Number> series1 = new XYChart.Series<Number, Number>();
        XYChart.Series<Number, Number> series2 = new XYChart.Series<Number, Number>();
        IntStream.range(0, Main.TRAINING_DATA.length).forEach(i ->
                series1.getData().add(new XYChart.Data<Number, Number>(Main.TRAINING_DATA[i][0][1], Main.TRAINING_DATA[i][1][0])));
        IntStream.range(0, Main.TRAINING_DATA.length).forEach(i ->
                series2.getData().add(new XYChart.Data<Number, Number>(Main.TRAINING_DATA[i][0][1], lr.getEstimate().getEntry(i, 0))));
        NumberAxis xAxis = new NumberAxis(0, 100, 50);
        xAxis.setLabel("Kkal");
        NumberAxis yAxis = new NumberAxis(0, 10, 1);
        yAxis.setLabel("glu_after_meter");
        ScatterChart<Number, Number> scatterChart = new ScatterChart<Number, Number>(xAxis, yAxis);
        scatterChart.getData().add(series1);
        LineChart<Number, Number> lineChart = new LineChart<Number, Number>(xAxis, yAxis);
        lineChart.getData().add(series2);
        lineChart.setOpacity(0.4);
        Pane pane = new Pane();
        pane.getChildren().addAll(scatterChart, lineChart);
        primaryStage.setScene(new Scene(pane, 580, 370));
        primaryStage.setOnHidden(e -> {try { handleCommandLine();} catch (Exception el) { el.printStackTrace();}});
        System.out.println("Close display window to proceed");
        primaryStage.setTitle("Linear Regression");
        primaryStage.show();
    }
}